// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package mono

import (
	"errors"
	"fmt"
)

const (
	// TransactionTypeDebit is a TransactionType of type debit.
	TransactionTypeDebit TransactionType = "debit"
	// TransactionTypeCredit is a TransactionType of type credit.
	TransactionTypeCredit TransactionType = "credit"
)

var ErrInvalidTransactionType = errors.New("not a valid TransactionType")

// String implements the Stringer interface.
func (x TransactionType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x TransactionType) IsValid() bool {
	_, err := ParseTransactionType(string(x))
	return err == nil
}

var _TransactionTypeValue = map[string]TransactionType{
	"debit":  TransactionTypeDebit,
	"credit": TransactionTypeCredit,
}

// ParseTransactionType attempts to convert a string to a TransactionType.
func ParseTransactionType(name string) (TransactionType, error) {
	if x, ok := _TransactionTypeValue[name]; ok {
		return x, nil
	}
	return TransactionType(""), fmt.Errorf("%s is %w", name, ErrInvalidTransactionType)
}
